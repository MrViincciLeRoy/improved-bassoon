name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for lock file
      id: lock-check
      run: |
        if [ -f package-lock.json ]; then
          echo "lockfile=npm" >> $GITHUB_OUTPUT
          echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
        elif [ -f yarn.lock ]; then
          echo "lockfile=yarn" >> $GITHUB_OUTPUT
          echo "install_cmd=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
        else
          echo "lockfile=" >> $GITHUB_OUTPUT
          echo "install_cmd=npm install --force" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: ${{ steps.lock-check.outputs.lockfile }}
    
    - name: Install dependencies
      run: ${{ steps.lock-check.outputs.install_cmd }}
    
    - name: Run type checking
      run: |
        if npm run type-check --silent 2>/dev/null; then
          npm run type-check
        else
          echo "No type-check script found, skipping..."
        fi
    
    - name: Run linting
      run: |
        if npm run lint --silent 2>/dev/null; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi
    
    - name: Run tests
      run: |
        if npm run test --silent 2>/dev/null; then
          npm run test -- --coverage --watchAll=false
        else
          echo "No test script found, skipping..."
        fi
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: hashFiles('coverage/lcov.info') != ''
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for lock file
      id: lock-check
      run: |
        if [ -f package-lock.json ]; then
          echo "lockfile=npm" >> $GITHUB_OUTPUT
          echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
        elif [ -f yarn.lock ]; then
          echo "lockfile=yarn" >> $GITHUB_OUTPUT
          echo "install_cmd=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
        else
          echo "lockfile=" >> $GITHUB_OUTPUT
          echo "install_cmd=npm install" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: ${{ steps.lock-check.outputs.lockfile }}
    
    - name: Install dependencies
      run: ${{ steps.lock-check.outputs.install_cmd }}
    
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
    
    - name: Build for web with GitHub Pages fixes
      run: |
        npx expo export --platform web
        # Create 404.html for GitHub Pages SPA routing
        cp dist/index.html dist/404.html
        # Add .nojekyll to prevent GitHub Pages from ignoring files with underscores
        touch dist/.nojekyll
        # List contents for debugging
        ls -la dist/
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/

  eas-build:
    name: EAS Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for lock file
      id: lock-check
      run: |
        if [ -f package-lock.json ]; then
          echo "lockfile=npm" >> $GITHUB_OUTPUT
          echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
        elif [ -f yarn.lock ]; then
          echo "lockfile=yarn" >> $GITHUB_OUTPUT
          echo "install_cmd=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
        else
          echo "lockfile=" >> $GITHUB_OUTPUT
          echo "install_cmd=npm install --force" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: ${{ hashFiles('**/package-lock.json', '**/yarn.lock') != '' && 'npm' || '' }}
    
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
    
    - name: Install dependencies
      run: ${{ steps.lock-check.outputs.install_cmd }}
    
    - name: Build on EAS
      run: eas build --platform all --non-interactive
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  deploy-expo:
    name: Deploy to Expo
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && vars.EXPO_TOKEN != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for lock file
      id: lock-check
      run: |
        if [ -f package-lock.json ]; then
          echo "install_cmd=npm ci" >> $GITHUB_OUTPUT
        elif [ -f yarn.lock ]; then
          echo "install_cmd=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
        else
          echo "install_cmd=npm install --force" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: ${{ hashFiles('**/package-lock.json', '**/yarn.lock') != '' && 'npm' || '' }}
    
    - name: Setup Expo
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
    
    - name: Install dependencies
      run: ${{ steps.lock-check.outputs.install_cmd }}
    
    - name: Publish to Expo
      run: npx expo publish --non-interactive
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  deploy-github-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: ${{ hashFiles('**/package-lock.json', '**/yarn.lock') != '' && 'npm' || '' }}
    
    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        elif [ -f yarn.lock ]; then
          yarn install --frozen-lockfile
        else
          npm install --force
        fi
    
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
    
    - name: Build for web
      run: npx expo export --platform web
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4